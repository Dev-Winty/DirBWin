using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Threading;

namespace DirbWin
{
    internal class Exploit
    {
        private List<string> riskDirs = null;
        private string url = string.Empty;

        public delegate void CallBack(object obj);

        public delegate void AddRiskCallBack(string dir, int resCode);

        public Exploit(List<string> risksDirs, string url)
        {
            this.riskDirs = risksDirs;
            this.url = url;
        }

        public void StartExploit(AddRiskCallBack addRiskCallBack, CallBack endCallBack)
        {
            Task task = new Task(new Action(() =>
            {
                foreach (string item in riskDirs)
                {
                    try
                    {
                        using (var client = new HttpClient())
                        {
                            var res = client.GetAsync(url + item).Result;

                            if ((int)res.StatusCode != 404)
                            {
                                var responseContent = res.Content;
                                var code = (int)res.StatusCode;

                                Application.Current.Dispatcher.Invoke(DispatcherPriority.Normal, new Action(delegate
                                {
                                    addRiskCallBack(item, (int)res.StatusCode);
                                }));
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("Error", "DirbWin", MessageBoxButton.OK, MessageBoxImage.Error);

                        Application.Current.Dispatcher.Invoke(DispatcherPriority.Normal, new Action(delegate
                        {
                            endCallBack(new object());
                        }));

                        return;
                    }
                }
                Application.Current.Dispatcher.Invoke(DispatcherPriority.Normal, new Action(delegate
                {
                    endCallBack(new object());
                }));
            }));

            task.Start();
        }
    }
}